/**
 * LeetCode 56: Merge Intervals
 * 
 * Problem: Given an array of intervals where intervals[i] = [starti, endi], 
 * merge all overlapping intervals, and return an array of the non-overlapping 
 * intervals that cover all the intervals in the input.
 * 
 * Approach: Greedy Algorithm
 * 1. Sort intervals by start time
 * 2. Merge overlapping intervals
 * 
 * Time Complexity: O(n log n) - due to sorting
 * Space Complexity: O(n) - for the result list
 * 
 * @author Gaur Sunder Dass
 */

import java.util.*;

class Solution {
    /**
     * Merges overlapping intervals
     * @param intervals array of intervals [start, end]
     * @return array of merged non-overlapping intervals
     */
    public int[][] merge(int[][] intervals) {
        // Edge case: single or no intervals
        if (intervals.length <= 1) return intervals;
        
        // Step 1: Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        List<int[]> merged = new ArrayList<>();
        
        // Step 2: Merge intervals
        int[] current = intervals[0];
        
        for (int i = 1; i < intervals.length; i++) {
            if (current[1] >= intervals[i][0]) {
                // Overlapping intervals - merge them
                current[1] = Math.max(current[1], intervals[i][1]);
            } else {
                // No overlap - add current interval and move to next
                merged.add(current);
                current = intervals[i];
            }
        }
        
        // Add the last interval
        merged.add(current);
        
        // Step 3: Convert list to array
        return merged.toArray(new int[merged.size()][]);
    }
}

/**
 * Test class with examples
 */
public class MergeIntervals {
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test Case 1
        int[][] intervals1 = {{1,3}, {2,6}, {8,10}, {15,18}};
        int[][] result1 = solution.merge(intervals1);
        System.out.println("Test 1: " + Arrays.deepToString(result1));
        // Expected: [[1,6], [8,10], [15,18]]
        
        // Test Case 2  
        int[][] intervals2 = {{1,4}, {4,5}};
        int[][] result2 = solution.merge(intervals2);
        System.out.println("Test 2: " + Arrays.deepToString(result2));
        // Expected: [[1,5]]
        
        // Test Case 3
        int[][] intervals3 = {{1,4}, {0,4}};
        int[][] result3 = solution.merge(intervals3);
        System.out.println("Test 3: " + Arrays.deepToString(result3));
        // Expected: [[0,4]]
        
        // Test Case 4 - Edge case
        int[][] intervals4 = {{1,4}};
        int[][] result4 = solution.merge(intervals4);
        System.out.println("Test 4: " + Arrays.deepToString(result4));
        // Expected: [[1,4]]
    }
}
